// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parking.Data.Context;

#nullable disable

namespace Parking.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Parking.Model.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complement")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FederativeUnit")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.HasKey("Id")
                        .HasName("PK__Addresse__3214EC07CB7D83E4");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Parking.Model.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3214EC0794F4CDEF");

                    b.HasIndex("AddressId");

                    b.HasIndex(new[] { "Cpf" }, "UQ__Customer__C1FF9309D04BA2C4")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Parking.Model.Models.CustomerVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3214EC0773697324");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CustomerVehicles");
                });

            modelBuilder.Entity("Parking.Model.Models.Stay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerVehicleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StayStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Stays__3214EC078CDF02D7");

                    b.HasIndex("CustomerVehicleId");

                    b.ToTable("Stays");
                });

            modelBuilder.Entity("Parking.Model.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("VehicleYear")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Vehicles__3214EC07D56A8AC5");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Parking.Model.Models.Customer", b =>
                {
                    b.HasOne("Parking.Model.Models.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__Customers__Addre__3A81B327");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Parking.Model.Models.CustomerVehicle", b =>
                {
                    b.HasOne("Parking.Model.Models.Customer", "Customer")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__CustomerV__Custo__412EB0B6");

                    b.HasOne("Parking.Model.Models.Vehicle", "Vehicle")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK__CustomerV__Vehic__4222D4EF");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Parking.Model.Models.Stay", b =>
                {
                    b.HasOne("Parking.Model.Models.CustomerVehicle", "CustomerVehicle")
                        .WithMany("Stays")
                        .HasForeignKey("CustomerVehicleId")
                        .HasConstraintName("FK__Stays__CustomerV__45F365D3");

                    b.Navigation("CustomerVehicle");
                });

            modelBuilder.Entity("Parking.Model.Models.Address", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Parking.Model.Models.Customer", b =>
                {
                    b.Navigation("CustomerVehicles");
                });

            modelBuilder.Entity("Parking.Model.Models.CustomerVehicle", b =>
                {
                    b.Navigation("Stays");
                });

            modelBuilder.Entity("Parking.Model.Models.Vehicle", b =>
                {
                    b.Navigation("CustomerVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
